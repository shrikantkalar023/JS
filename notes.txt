1.Use 'let' when need variable 'const' when need constant var.

2.FORIN LOOP:- to 'iterate' in object.

3.Single Responsibility Principle: Each fn doing its own one thing.

4.'radius: radius' is equivalent to 'radius' (inside a fn)

5.camel Case -> oneTwoThree
  Pascal Case -> OneTwoThree

6.Every Obj has a Constructor property which 
references the fn used to create that obj

7.FOROF LOOP:- works with iterables only. Objs r not iterable, but
we can use 'Objects.keys(Obj_name)' or 'Object.entries(obj_name)'
to get array of keys & key,value pair respectively.

8.We have 'math' & 'str' obj just like in py.

9.chaining methods = map().filer() calling method on another method

10.if '(!excluded.includes(ele))' for targeting 'false' condition.

11.'Hoisting' in JS is moving up all the fn declarations to the top of the file.
it is done by automaticallly JS engine executing the code.

12. OOP is a style of programing. 4 pillars (Encapsulation, Abstraction, 
Inheritance, Polymorphism).

Encapsulation = grouping related vars and fns into objects.
Abstraction= hiding properties and methods from user.
Inheritance= eliminating redundant code via letting child inherit properties from parent.
Polymorphism= same fns behaving in diff ways.

13.Closure vs Scope: Closure is permanent while Scope is temporary.
Closure: what vars are accessible to inner fns

14.Classical & Prototypical Inheritance in JS. Prototype is a regular obj which can be
thought as a parent. Every obj has a Prototype,except the root proto ojb.

15. Objs created by same Constructor have same Prototype.

16. Every 'Constructor' fn has a 'Prototype' property, which is same as
obj.__proto__ of all objs made by that Constructor. (objectBase)

17. Don't modify objects u don't own. (built-in objs)

18. Premature optimizations is the root of all evil.

19. Whenever we reset prototype, we should reset Constructor as well.

20.Avoid creating Inheritance hierarchies bsc they r very fragile. Max 1 level of inheritance.

21. Favour 'Composition' over 'Inheritance'. mixins

22.ES6 classes r just Constructor fns. Cleaner syntax.

23.Arrow fns use 'this' value of their containing fns.

24. Modules 4 types of syntax:-
    1.AMD (browser)
    2.CommonJS (Node.js)
    3.UMD (broser & Node.js)
    4.ES6 new native module format (browser)